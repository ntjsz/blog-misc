@startuml ClassDiagram
class InternalHttpAsyncClient {
    PoolingNHttpClientConnectionManager connmgr
    Thread reactorThread
}

class PoolingNHttpClientConnectionManager {
    DefaultConnectingIOReactor connIOReactor
    CPool pool
}

class DefaultConnectingIOReactor {
    Queue<SessionRequestImpl> requestQueue
    Selector selector
    BaseIOReactor[] dispatchers
    Worker[] workers
    Thread[] threads
}

class BaseIOReactor {
    InternalIODispatch eventDispatch
    Selector selector
}

class InternalIODispatch {
    HttpAsyncRequestExecutor handler
}

class CPool {
    DefaultConnectingIOReactor connIOReactor
    LinkedList<LeaseRequest<T, C, E>> leasingRequests
    Set<SessionRequest> pending
    Set<E> leased
    LinkedList<E> available
    Map<T, Integer> maxPerRoute
}

InternalHttpAsyncClient ..> PoolingNHttpClientConnectionManager

PoolingNHttpClientConnectionManager ..> DefaultConnectingIOReactor
PoolingNHttpClientConnectionManager ..> CPool

DefaultConnectingIOReactor ..> BaseIOReactor

BaseIOReactor ..> InternalIODispatch

CPool ..> DefaultConnectingIOReactor

@enduml

@startuml SequenceDiagram Main
skinparam monochrome true
skinparam ParticipantBackgroundColor #E0E0E0
hide footbox

-> client: start()
activate client
client ->> reactorThread: start()
<-- client: return


@enduml

@startuml
skinparam monochrome true
skinparam ParticipantBackgroundColor #E0E0E0
hide footbox

participant "DefaultConnectingIOReactor's\nSelector" as masterSelector
participant InternalHttpAsyncClient as client
participant reactorThread
participant InternalIODispatch as ioEventDispatch
participant PoolingNHttpClientConnectionManager as connmgr
participant DefaultConnectingIOReactor as connIOReactor
participant "Queue<SessionRequestImpl>" as requestQueue
participant workerThread_N
participant BaseIOReactor as baseIOReactor
participant "BaseIOReactor's\nSelector" as slaveSelector

-> client: start()
activate client
client ->> reactorThread: start()
activate reactorThread
<-- client: return
reactorThread -> ioEventDispatch: new Instance
activate ioEventDispatch
reactorThread -> connmgr: execute(InternalIODispatch)
activate connmgr
connmgr -> connIOReactor: execute(InternalIODispatch)
activate connIOReactor
connIOReactor ->> workerThread_N: start()
loop infinited
    connIOReactor -> masterSelector: select()
    ->> masterSelector: wakeup()
    connIOReactor <- masterSelector: return: readyCount
    |||
    connIOReactor -> connIOReactor: processEvents(readyCount)
        activate connIOReactor
        connIOReactor -> connIOReactor: processSessionRequests()
            activate connIOReactor
            loop !queue.isEmpty()
                connIOReactor -> requestQueue: poll()
                connIOReactor <- requestQueue: return: request
                connIOReactor -> connIOReactor: SocketChannel.connect()
                connIOReactor -> baseIOReactor: addChannel()
                baseIOReactor ->> slaveSelector: wakeup()
                connIOReactor -> masterSelector: register this channel
            end
            deactivate connIOReactor
        connIOReactor -> masterSelector: selectedKeys()
        connIOReactor <- masterSelector: return: Set<SelectionKey>
        connIOReactor -> connIOReactor: connectable channel.finishConnect()\nkey.cancel()
        connIOReactor -> connIOReactor: processTimeouts(SelectionKeys)
        deactivate connIOReactor
    connIOReactor -> connIOReactor: handleExceptions
end


@enduml